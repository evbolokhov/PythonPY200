# Атрибут класса
# 1.0 Публичный атрибут класса         +
# 1.1 Защищеный атрибут класса "_"     +
# 1.2 Приватный атрибут класса "__"    +
#
# Атрибут экземпляра
# 2.1 Публичный атрибут экземпляра     +
# 2.2 Защищеный атрибут экземпляра     +
# 2.3 Приватный атрибут экземпляра     +
#
# Метод экземпляра
# 3.1 Публичный метод экземпляра       +
# 3.2 Защищеный метод экземпляра       +
# 3.3 Приватный метод экземпляра       +
#
# Метод класса
# 4.1 Публичный метод класса           +
# 4.2 Защищеный метод класса           +
# 4.3 Приватный метод класса           +
#
# Статический метод
# 5.1 Публичный статический метод
# 5.2 Защищеный статический метод
# 5.3 Приватный статический метод
#
# Сделать наследника и через него проверить область видимости предка
# (т.е всё то, что бы реализовано в классе A)

import time


class DriverNotFound(Exception):
    pass


class EngineIsNotRunning(Exception):
    pass


class Car:
    wheel_count = 4  # публичный атрибут класса
    _engine_type = 'бензин'  # защищённый атрибут класса
    __max_speed = 180  # приватный атрибут класса
    __created_car = 0
    # =================
    # Магические методы
    # =================

    def __init__(self, color, body_type):
        self.color = color  # Публичный атрибут экземпляра
        self.body_type = body_type  # Публичный атрибут экземпляра

        self._driver = None  # Защищённый атрибут экземпляра (не отображается при импорте)

        self.__current_speed = 0  # Приватный атрибут экземпляра
        self.__running_status = False  # Приватный атрибут экземпляра

    def __repr__(self):
        return f'{self.__class__.__name__}("{self.color}", "{self.body_type}")'

    def __str__(self):
        return f'Машина с кузовом {self.body_type}. Цвет {self.color}.'

    def __new__(cls, *args, **kwargs):
        cls.__create_new_car()
        print(f'Всего создано автомобилей {cls.__created_car} класса {cls.__name__}')
        return super(Car, cls).__new__(cls)

    # ========================
    # Методы экземпляра класса
    # ========================

    def start_engine(self) -> None:
        """Публичный метод экземпляра
        У пользователя есть к нему доступ и он может им пользоваться

        Метод имитирует завод машины, для того, чтобы она смогла поехать

        :return:
        """

        self.__running_status = True

    def move(self, distance: int = 10) -> None:
        """Публичный метод экземпляра
        У пользователя есть к нему доступ и он может им пользоваться

        Метод имитирует движение машины на указанную дистанцию

        :param distance: дистанция, на которую поедет машина
        :return: None
        """

        if self._is_ready_running():

            for i in range(distance):
                print(f'Машина проехала {i+1} км.')
                time.sleep(0.3)
            print('Указанный путь пройден')

    def _is_ready_running(self) -> bool:
        """Защищённый метод экземпляра,
        У пользователя есть к нему доступ, но он не будет отображаться
        в виде всплывающих подсказок при использовании класса.

        Метод проверяет готовность автомобиля к движению.

        :return: статус готовности
        """

        if not self.__running_status:
            raise EngineIsNotRunning()

        if not self.__check_driver():
            raise DriverNotFound("Машина без водителя не поедет")

        return True

    def __check_driver(self) -> bool:
        """Приватный метод экземпляра,
        У пользователя нет к нему доступа, т.к. он используется
        для внутренней проверки значений класса

        Метод проверяет есть ли водитель в машине

        :return: наличие водителя в машине
        """

        if self._driver is None:
            return False
        return True

    # =============
    # Методы класса
    # =============

    @classmethod
    def get_wheel_count(cls) -> int:
        """Публичный метод класса
        У пользователя есть к нему доступ и он может им пользоваться

        Метод класса возвращает количество колёс у автомобилей класса Car

        :return: количество колёс в автомобилях
        """

        return cls.wheel_count

    @classmethod
    def _set_engine_type(cls, engine_type: str) -> None:
        """Защищённый метод класса,
        У пользователя есть к нему доступ, но он не будет отображаться
        в виде всплывающих подсказок при использовании класса.

        Метод класса позволяет изменить тип двигателя у автомобилей класса Car

        :param engine_type: новый тип двигателя
        :return: None
        """

        cls._engine_type = engine_type

    @classmethod
    def __create_new_car(cls) -> None:
        """Приватный метод класса,
        У пользователя нет к нему доступа, т.к. он используется
        для внутренней проверки значений класса

        Метод добавляет к счётчику машин + 1

        :return: None
        """
        cls.__created_car += 1

    # ==================
    # Статические методы
    # ==================

    @staticmethod
    def is_car(color: str, body_type: str) -> bool:
        """Публичный статический метод
        У пользователя есть к нему доступ и он может им пользоваться

        Метод проверяет, являются ли введённые данные заготовкой
        для создания автомобиля

        :param color: Цвет машины
        :param body_type: Тип кузова
        :return: Является ли данные валидными
        """

        if not isinstance(color, str):
            raise TypeError('Неверно указан цвет, должен быть str')

        if not isinstance(body_type, str):
            raise TypeError('Неверно указан тип кузова, должен быть str')

        return True

    @staticmethod
    def __check_max_speed_value(speed):
        if not isinstance(speed, (int, float)):
            raise TypeError('Неверно указана скорость автомобиля')

        if speed < 0:
            raise AttributeError('Скорость не может быть меньше 0')







